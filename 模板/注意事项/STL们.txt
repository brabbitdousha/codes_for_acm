STL们
map遍历方式
int main()
{
	map<char,int> ma;
	ma['A']=0;ma['B']=0;ma['C']=0;	ma['D']=0;
		ma['E']=0;	ma['F']=0;	ma['G']=0;	ma['H']=0;
			ma['I']=0;	ma['J']=0;	ma['K']=0;	ma['L']=0;
				ma['M']=0;	ma['N']=0;	ma['O']=0;ma['P']=0;
		ma['Q']=0;	ma['R']=0;	ma['S']=0;	ma['T']=0;	ma['U']=0;
			ma['V']=0;ma['W']=0;ma['X']=0;	ma['Y']=0;	ma['Z']=0;
	string a;
	getline(cin,a);
	for(int i=0;i<a.length();i++)
	{    ma[a[i]]++;}
	map<char, int>::const_iterator it; 
	for (it = ma.begin(); it != ma.end(); ++it)
        cout << it->first << "=" << it->second << endl; 
	 return 0;
}
set遍历方式
int main(int argc, char* argv[])
{
    set<int> st;

    // 在容器中插入元素
    st.insert(4);
    // 任意位置插入一个元素
    set<int>::iterator it = st.begin();
    st.insert(it, 2);

    // 遍历显示
    for (it = st.begin(); it != st.end(); it++)
        cout << *it << " "; // 输出：2 4
    cout << endl;

    return 0;
}
lower_bound(起始地址，结束地址，要查找的数值) 返回的是数值 第一个 出现的位置。

upper_bound(起始地址，结束地址，要查找的数值) 返回的是数值 最后一个 出现的位置。
#include<bits/stdc++.h>
#define ll long long
using namespace std;
int main()
{
	int p[300];
	int cnt=0;
	p[++cnt]=2;
	p[++cnt]=6;
	p[++cnt]=7;
	p[++cnt]=20;
	int hehe=8;
	int hh=upper_bound(p+1,p+1+cnt,hehe)-p;//直接减p才是大于hehe的真实下标。 或者你就不要用数组从1开始
	cout<<p[hh];
	return 0;
}

