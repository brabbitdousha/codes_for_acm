
lower_bound(起始地址，结束地址，要查找的数值) 返回的是数值 第一个 出现的位置。

upper_bound(起始地址，结束地址，要查找的数值) 返回的是数值 最后一个 出现的位置。
#include<bits/stdc++.h>
#define ll long long
using namespace std;
int main()
{
	int p[300];
	int cnt=0;
	p[++cnt]=2;
	p[++cnt]=6;
	p[++cnt]=7;
	p[++cnt]=20;
	int hehe=8;
	int hh=upper_bound(p+1,p+1+cnt,hehe)-p;//直接减p才是大于hehe的真实下标。 或者你就不要用数组从1开始
	cout<<p[hh];
	return 0;
}

binary_search(起始地址，结束地址，要查找的数值)  返回的是是否存在这么一个数，是一个bool值。
lower_bound( )和upper_bound( )都是利用二分查找的方法在一个排好序的数组中进行查找的。

在从小到大的排序数组中，

lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。

upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。

在从大到小的排序数组中，重载lower_bound()和upper_bound()

lower_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。

upper_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。

    #include<bits/stdc++.h>
    using namespace std;
    const int maxn=100000+10;
    const int INF=2*int(1e9)+10;
    #define LL long long
    int cmd(int a,int b){
    	return a>b;
    }
    int main(){
    	int num[6]={1,2,4,7,15,34}; 
    	sort(num,num+6);                           //按从小到大排序 
    	int pos1=lower_bound(num,num+6,7)-num;    //返回数组中第一个大于或等于被查数的值 
    	int pos2=upper_bound(num,num+6,7)-num;    //返回数组中第一个大于被查数的值
    	cout<<pos1<<" "<<num[pos1]<<endl;
    	cout<<pos2<<" "<<num[pos2]<<endl;
    	sort(num,num+6,cmd);                      //按从大到小排序
    	int pos3=lower_bound(num,num+6,7,greater<int>())-num;  //返回数组中第一个小于或等于被查数的值 
    	int pos4=upper_bound(num,num+6,7,greater<int>())-num;  //返回数组中第一个小于被查数的值 
    	cout<<pos3<<" "<<num[pos3]<<endl;
    	cout<<pos4<<" "<<num[pos4]<<endl;
    	return 0;	
    } 
upper_bound(num,num+6,7)-lower_bound(num,num+6,7) 找7的数量


单个元素查找

1、 find() 比较条件为元素是否相等的查找：

1

2
	

template <class InputIterator, class T>

InputIterator find (InputIterator first, InputIterator last, const T& val);

2、find_if() 自定义比较函数 
从给出的区间中查找第一个满足比较函数的元素

1

2

3

4

5
	

bool cmpFunction (int i) {

  return ((i%30)==0);

}

it = std::find_if (myvector.begin(), myvector.end(), cmpFunction);

std::cout << "first:" <<  *it <<std::endl;

3、count() 统计元素出现的次数 
std::count() 统计区间中某个元素出现的次数 
std::count_if() 自定义比较函数

4、min_element() 查找给定区间内最小值

5、max_element() 查找给定区间内最大值

6、binary_search() 有序区间的二分查找 
binary_search() 用来在一个有序区间中使用二分法查找元素是否在这个区间中，该算法的返回值为bool表示是否存在。

1

2

3

4

5

6
	

template <class ForwardIterator, class T>

  bool binary_search (ForwardIterator first, ForwardIterator last, const T& val)

{

  first = std::lower_bound(first,last,val);

  return (first!=last && !(val<*first));

}

 

7、lower_bound() 返回有序序列给定区间[first, last) (左闭右开）内的第一个大于等于value的位置。如果所有元素都小于value，则返回last。

1

2

3

4

5
	

template< class ForwardIterator, class Type >

ForwardIterator lower_bound( ForwardIterator first, ForwardIterator last, const Type &value );

 

template< class ForwardIterator, class Type, class Compare>

ForwardIterator　lower_bound( ForwardIterator first,　ForwardIterator last, const Type &value, Compare comp ); //支持自定义比较函数

 

8、upper_bound() 返回有序序列给定区间[first, last) (左闭右开）内的第一个大于value的位置。如果所有元素都小于等于value，则返回last。

1

2

3

4

5
	

template< class ForwardIterator, class Type >

ForwardIterator upper_bound( ForwardIterator first, ForwardIterator last, const Type &value );

 

template< class ForwardIterator, class Type, class Compare>

ForwardIterator　upper_bound( ForwardIterator first,　ForwardIterator last, const Type &value, Compare comp ); //支持自定义比较函数

 

其中lower_bound/upper_bound 可以用于任何支持随机访问的容器中，比如vector，deque，数组。对于不支持随机访问的容器如 set/map，这些容器有同名的方法来进行 lower_bound/upper_bound 操作。

1

2

3

4
	

map::lower_bound(key):返回map中第一个大于或等于key的迭代器指针

map::upper_bound(key):返回map中第一个大于key的迭代器指针

set::lower_bound(val):返回set中第一个大于或等于val的迭代器指针

set::upper_bound(val):返回set中第一个大于val的迭代器指针

 

区间查找(区间整体匹配）

1、search() 查找子区间首次出现的位置 
find() 用来查找单个元素，search() 用来查找一个子区间，比如 从myvector中查找自取件[20, 30] 的位置

1

2

3

4
	

int needle1[] = {20,30};

it = std::search (myvector.begin(), myvector.end(), needle1, needle1+2);

if (it!=myvector.end())

std::cout << "needle1 found at position " << (it-myvector.begin()) << '\n';

 

search() 支持自定义比较函数，比如查询给定区间中每个元素比目标区间小1的子区间：

1

2

3

4

5

6

7

8

9
	

bool cmpFunction (int i, int j) {

  return (i-j==1);

}

int myints[] = {1,2,3,4,5,1,2,3,4,5};

std::vector<int> haystack (myints,myints+10);

 

int needle2[] = {1,2,3};

// using predicate comparison:

it = std::search (haystack.begin(), haystack.end(), needle2, needle2+3, cmpFunction);

 

2、find_end() 查找子区间最后一次出现的位置 
search()查找子区间第一次出现的位置，而find_end() 用来查找子区间最后一次出现的位置，find_end()支持自定义比较函数。

3、equal() 判断两个区间是否相等

4、mismatch() 查询两个区间首次出现不同的位置

集合查找（集合内任意一个元素匹配）

find_first_of() 查找给定集合中的任意一个元素
